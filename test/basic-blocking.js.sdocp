sdocp('test/basic-blocking.js.sdoc', 'Simple blocking queue tests\n\ncaterwaul.clone(\'std\', \'error\', \'queue.blocking\')(function () {\n  var q = caterwaul.queue.blocking(3, {empty: fn_[empty()]}), callbacks = {}, empty = null;\n\n  q(fn[free_cc][callbacks.first = free_cc]);\n  callbacks.first || error.fail[\'Failed to synchronously invoke the first callback on an empty queue\'];\n\n  q(fn[free_cc][callbacks.second = free_cc]);\n  callbacks.second || error.fail[\'Failed to synchronously invoke the second callback\'];\n\n  q(fn[free_cc][callbacks.third = free_cc]);\n  callbacks.third || error.fail[\'Failed to synchronously invoke the third callback\'];\n\n  q(fn[free_cc][callbacks.fourth = free_cc]);\n  callbacks.fourth && error.fail[\'Failed to block on the fourth\'];\n\n  q(fn[free_cc][callbacks.fifth = free_cc]);\n  callbacks.fifth && error.fail[\'Failed to block on the fifth\'];\n\n  callbacks.first();\n  callbacks.fourth || error.fail[\'Failed to invoke the fourth after freeing one\'];\n\n  callbacks.second();\n  callbacks.fifth || error.fail[\'Failed to invoke the fifth after freeing one\'];\n\n  var got_empty = false;\n  empty() = got_empty = true;\n  callbacks.third();\n  callbacks.fourth();\n  callbacks.fifth();\n\n  got_empty || error.fail[\'Failed to trigger the empty listener\'];\n\n  var count = 0;\n  q(fn_[++count]);\n  q(fn_[++count]);\n  q(fn_[++count]);\n\n  count === 3 || error.fail[\'Queue blocking prematurely after being emptied -- only got #{count} of 3 event(s)\'];\n})();\n');